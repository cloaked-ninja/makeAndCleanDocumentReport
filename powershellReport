#for interacting with SharePoint.  Needs to be ran on SharePoint server
[System.Reflection.Assembly]::Load("Microsoft.SharePoint, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c")
[System.Reflection.Assembly]::Load("Microsoft.SharePoint.Portal, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c")
[System.Reflection.Assembly]::Load("Microsoft.SharePoint.Publishing, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c")
[System.Reflection.Assembly]::Load("System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")

#enables using VBA modules
#make sure Macro Security Settings in Excel are set to "Trust" access to VBA model
[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.Vbe.Interop") | Out-Null

function Get-DocInventory([string]$siteUrl) {
$site = New-Object Microsoft.SharePoint.SPSite $siteUrl
foreach ($web in $site.AllWebs) {
foreach ($list in $web.Lists) {
if ($list.BaseType -ne “DocumentLibrary”) {
continue
}
#if exists as item property then can call like $item.Title. if added, call like $item.["Named Field"]
#Get information for all items on SharePoint site

foreach ($item in $list.Items) {
$data = @{
"Top Level Site Name" = $site.Url
"SubSite" = $web.Url
"Title" = $item.Title
"Item Created" = $item["Created"]
"D-Code" = $item["D-Code"]
"Item ID" = $item.ID
"Document Library or List" = $list.Title
"Item URL" = $item.Url
"Item Version" = $item["Version"]
"Item Modified" = $item["Modified"]
"Created By" = $item["Author"]
"Modified By" = $item["Editor"]
"File Size (KB)" = $item.File.Length/1KB
"File Size (MB)" = $item.File.Length/1MB
}
New-Object PSObject -Property $data
}
}
$web.Dispose();
}
$site.Dispose()
}


Get-DocInventory "http://SharePointServer" | Export-Csv -NoTypeInformation -Path "C:\users\thisUser\Desktop\DocDetailDirty.csv"


#Get Macro and add to Excel document

###################### New ##########################################
#needs report to exist

#load if not already loaded for access to VBA code
[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.Vbe.Interop") | Out-Null

#add macro to Excel document

$xl = New-Object -ComObject Excel.Application
$xl.Visible = $true
$xl.DisplayAlerts = $false

#if saved as CSV then it resaves as Excel Macro Enabled (xlsm) correctly
#xlsx doesn't work for some reason to resave as xlsm
#uses document report path from earlier script
$workbook = $xl.Workbooks.Open("c:\users\thisUser\desktop\DocDetailDirty.csv")

$xlmodule = $workbook.VBProject.VBComponents.Add(1)

$code = @"
Sub cleanReport()
Call removeUnneeded
Call fixNames
Call clickableUrl
End Sub

Sub removeUnneeded()
'Run this first macro first to remove extra data from SharePoint
'Next line hides screen while changes are being made
            Application.ScreenUpdating = False
' Removes extraneous hash setup from SharePoint exported workbook
' Extra numbers remain in some cases with user names, so still need to run other macro to remove those
' If there is an error, check Range
            Dim Again As Integer
            Dim Again1 As Range
            On Error GoTo Nope
            Set Again1 = Cells.Find(What:="?;#", LookAt:=xlPart)
            If Again1 Is Nothing Then
                Set Again1 = Cells.Find(What:=";#?", LookAt:=xlPart)
                If Again1 Is Nothing Then
                    GoTo Nope
                End If
            End If

            'sometimes the Range value will change
            Range("F1").Select
            Again = 1
            Do While Again < 5

                Set Again1 = Cells.Find(What:=";#0", LookAt:=xlPart)
                Do While Not Again1 Is Nothing
                    Cells.Replace What:=";#0", Replacement:=";#", LookAt:=xlPart, _
                    SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                    ReplaceFormat:=False
                    Set Again1 = Cells.Find(What:=";#0", LookAt:=xlPart)
                Loop
                Set Again1 = Cells.Find(What:=";#1", LookAt:=xlPart)
                Do While Not Again1 Is Nothing
                    Cells.Replace What:=";#1", Replacement:=";#", LookAt:=xlPart, _
                    SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                    ReplaceFormat:=False
                    Set Again1 = Cells.Find(What:=";#1", LookAt:=xlPart)
                Loop
                Set Again1 = Cells.Find(What:=";#2", LookAt:=xlPart)
                Do While Not Again1 Is Nothing
                    Cells.Replace What:=";#2", Replacement:=";#", LookAt:=xlPart, _
                    SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                    ReplaceFormat:=False
                    Set Again1 = Cells.Find(What:=";#2", LookAt:=xlPart)
                Loop
                Set Again1 = Cells.Find(What:=";#3", LookAt:=xlPart)
                Do While Not Again1 Is Nothing
                    Cells.Replace What:=";#3", Replacement:=";#", LookAt:=xlPart, _
                    SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                    ReplaceFormat:=False
                    Set Again1 = Cells.Find(What:=";#3", LookAt:=xlPart)
                Loop
                Set Again1 = Cells.Find(What:=";#4", LookAt:=xlPart)
                Do While Not Again1 Is Nothing
                    Cells.Replace What:=";#4", Replacement:=";#", LookAt:=xlPart, _
                    SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                    ReplaceFormat:=False
                    Set Again1 = Cells.Find(What:=";#4", LookAt:=xlPart)
                Loop
                Set Again1 = Cells.Find(What:=";#5", LookAt:=xlPart)
                Do While Not Again1 Is Nothing
                    Cells.Replace What:=";#5", Replacement:=";#", LookAt:=xlPart, _
                    SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                    ReplaceFormat:=False
                    Set Again1 = Cells.Find(What:=";#5", LookAt:=xlPart)
                Loop
                Set Again1 = Cells.Find(What:=";#6", LookAt:=xlPart)
                Do While Not Again1 Is Nothing
                    Cells.Replace What:=";#6", Replacement:=";#", LookAt:=xlPart, _
                    SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                    ReplaceFormat:=False
                    Set Again1 = Cells.Find(What:=";#6", LookAt:=xlPart)
                Loop
                Set Again1 = Cells.Find(What:=";#7", LookAt:=xlPart)
                Do While Not Again1 Is Nothing
                    Cells.Replace What:=";#7", Replacement:=";#", LookAt:=xlPart, _
                    SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                    ReplaceFormat:=False
                    Set Again1 = Cells.Find(What:=";#7", LookAt:=xlPart)
                Loop
                Set Again1 = Cells.Find(What:=";#8", LookAt:=xlPart)
                Do While Not Again1 Is Nothing
                    Cells.Replace What:=";#8", Replacement:=";#", LookAt:=xlPart, _
                    SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                    ReplaceFormat:=False
                    Set Again1 = Cells.Find(What:=";#8", LookAt:=xlPart)
                Loop
                Set Again1 = Cells.Find(What:=";#9", LookAt:=xlPart)
                Do While Not Again1 Is Nothing
                    Cells.Replace What:=";#9", Replacement:=";#", LookAt:=xlPart, _
                    SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                    ReplaceFormat:=False
                    Set Again1 = Cells.Find(What:=";#9", LookAt:=xlPart)
                Loop
                Again = Again + 1
            Loop
            Set Again1 = Cells.Find(What:="#;#", LookAt:=xlPart)
            Do While Not Again1 Is Nothing
                Cells.Replace What:="#;#", Replacement:=" | ", LookAt:=xlPart, _
                SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                ReplaceFormat:=False
                Set Again1 = Cells.Find(What:="#;#", LookAt:=xlPart)
            Loop
            Set Again1 = Cells.Find(What:=";#", LookAt:=xlPart)
            Do While Not Again1 Is Nothing
                Cells.Replace What:=";#", Replacement:="", LookAt:=xlPart, _
                SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                ReplaceFormat:=False
                Set Again1 = Cells.Find(What:=";#", LookAt:=xlPart)
            Loop
            Set Again1 = Cells.Find(What:="#;", LookAt:=xlPart)
            Do While Not Again1 Is Nothing
                Cells.Replace What:="#;", Replacement:="", LookAt:=xlPart, _
                SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                ReplaceFormat:=False
                Set Again1 = Cells.Find(What:="#;", LookAt:=xlPart)
            Loop
            Set Again1 = Cells.Find(What:="#", LookAt:=xlPart)
            Do While Not Again1 Is Nothing
                Cells.Replace What:="#", Replacement:="", LookAt:=xlPart, _
                SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                ReplaceFormat:=False
                Set Again1 = Cells.Find(What:="#", LookAt:=xlPart)
            Loop
            Set Again1 = Cells.Find(What:="; |", LookAt:=xlPart)
            Do While Not Again1 Is Nothing
                Cells.Replace What:="; |", Replacement:=" |", LookAt:=xlPart, _
                SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                ReplaceFormat:=False
                Set Again1 = Cells.Find(What:="; |", LookAt:=xlPart)
            Loop
            Range("F1").Select
'commented out message box to notify completed cleanup part 1
'MsgBox "Extraneous hash data has been deleted."
            Exit Sub
Nope:
            MsgBox "Either the SharePoint data was already cleaned up or this is not the proper spreadsheet to run this macro on."
        End Sub

'run this after removeUnneeded sub
'fixes User names under Created By and Modified By columns
        Sub fixNames()
            Cells.Find("Created By", , xlValues, xlWhole).EntireColumn.SpecialCells(xlCellTypeConstants).Offset(1).SpecialCells(xlCellTypeConstants).Select
            Call removeNumbers
            Cells.Find("Modified By", , xlValues, xlWhole).EntireColumn.SpecialCells(xlCellTypeConstants).Offset(1).SpecialCells(xlCellTypeConstants).Select
            Call removeNumbers

        End Sub

'Change all the cells in the ActiveSheet to values and not references
    Sub All_Cells_In_Active_WorkSheet()
        With ActiveSheet.UsedRange
            .Cells.Copy
            .Cells.PasteSpecial xlPasteValues
            .Cells(1).Select
        End With
        Application.CutCopyMode = False
    End Sub

        Sub clickableUrl()
'Make and adjust URL appearance and values
'Adds a new column to cell O1
'Not sure on auto-adjusting the values to fit the entire column and not go over
'May need to change the RC value (-8 is default) to match the data; sharetest has a different format and needs to be updated to [-9]
            Range("O1").Select
            ActiveCell.FormulaR1C1 = "Clickable Url"
            Range("O2").Select
            ActiveCell.FormulaR1C1 = "=CONCATENATE(RC[-9],""/"",RC[-7])"
            Range("O2").Select
            'Need to find a way to get this Range automatically; however right now it is set
            Selection.AutoFill Destination:=Range("O2:O30829")
            Call staticUrlValues
            Call addHyperlink
'Automatically expands the column to show URL
            Columns("O:O").EntireColumn.AutoFit

        End Sub

    Sub addHyperlink()
'Converts each text hyperlink selected into a working hyperlink
'Finds the column listed first (Clickable Url), then changes everything under that
        Cells.Find("Clickable Url", , xlValues, xlWhole).EntireColumn.SpecialCells(xlCellTypeConstants).Offset(1).SpecialCells(xlCellTypeConstants).Select

        For Each xCell In Selection
            ActiveSheet.Hyperlinks.Add Anchor:=xCell, Address:=xCell.Formula
            Next xCell

        End Sub

'just get static values for one column, so that we can change relative values to static to help in creating clickable URL for each reference document
        Sub staticUrlValues()
            With ActiveSheet
                With .Range("O1")
                    .AutoFilter Field:=1, Criteria1:="<>0"
                    .CurrentRegion.SpecialCells(xlCellTypeVisible) = _
                    .CurrentRegion.SpecialCells(xlCellTypeVisible).Value2
                    .AutoFilter
                End With
            End With
        End Sub


        Private Sub Worksheet_Activate()
'assume that your values are in col A
            Dim lnRow As Long
            Dim rnValue As Range
'find last row
            lnRow = Range("o" & Rows.Count).End(xlUp).Row
'run a loop over all cells in col A with values/formulas
            Do
                Set rnValue = Range("o" & lnRow)
'if your vlookup returns a 0 it will skip, otherwise it will copy/paste as values, you can customize the <> "" to something else
                If rnValue.Value2 <> 0 Then rnValue = rnValue.Value2
'bump last row up 1
                lnRow = lnRow - 1
            Loop Until lnRow = 0

        End Sub

        Sub removeNumbers()
'Remove numbers from columns where it doesn't make sense, like from the User Names in the Created By
'Run macro faster
            Application.ScreenUpdating = False
            s = Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
            For Each r In Selection
                v = r.Value
                For i = 0 To 9
                    v = Replace(v, s(i), "")
                Next
                r.Value = v
            Next
        End Sub
"@

#inserts the VBA code above
$xlmodule.CodeModule.AddFromString($code)

#works from CSV to XLSM format?
$xl.ActiveWorkbook.SaveAs("C:\users\thisUser\desktop\DocDetailReportC.xlsm")
